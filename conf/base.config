/*
 * -------------------------------------------------
 * Nextflow config file for Layer Lab DNA Seq Variant Calling Pipeline
 * -------------------------------------------------
 * Basic configuration for some process
 * -------------------------------------------------
 */


NF_DIR='nf_reports'
process {
  cpus = {check_resource(params.cpus * task.attempt)}
  memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * task.attempt)}
  time = {check_resource(24.h * task.attempt)}
  shell = ['/bin/bash', '-euo', 'pipefail']

  errorStrategy = {task.exitStatus in [143,137,104,134,139, 255] ? 'retry' : 'finish'}
  //errorStrategy = 'retry'
  maxErrors = '-1'
  maxRetries = 1

  withLabel:cpus_1 {
    cpus = {check_resource(1)}
  }
  withLabel:cpus_2 {
    cpus = {check_resource(2)}
  }
  withLabel:cpus_4 {
    cpus = {check_resource(4)}
  }
  withLabel:cpus_8 {
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    cpus = {check_resource(16)}
    //cpus = {check_resource(4)}
  }
  
  withLabel:cpus_32 {
    // cpus = {check_resource(32)}
    cpus = {check_resource(16)}
  }
  withLabel:cpus_max {
    //cpus = {params.max_cpus}
    cpus = {check_resource(16)}
  }

  withLabel:memory_singleCPU_2_task {
    memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * 2 * task.attempt)}
  }
  withLabel:memory_singleCPU_task_sq {
    memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * task.attempt * task.attempt)}
  }

  withLabel:memory_max {
    memory = {params.max_memory}
  }

  withName:ConcatVCF {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  
  withLabel:FastQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  
  withName:MapReads {
    memory = {check_resource(60.GB * task.attempt)}
    time = {check_resource(24.h * task.attempt)}
  }

  withName:MarkDuplicates {
    memory = {check_resource(256.GB * task.attempt)}
    time = {check_resource(24.h * task.attempt)}
  }
  
  withName:PartitionFastQ {
    memory = {check_resource(256.GB * task.attempt)}
    time = {check_resource(24.h * task.attempt)}
  }
  
  withName:CreateSomaticPON {
    memory = {check_resource(256.GB * task.attempt)}
    time = {check_resource(24.h * task.attempt)}
  }
  
  

  withName:DV_Combined {
    container = 'file:///scratch/Shares/layer/singularity/deepvariant_0.10.0.sif'
    //container = 'file:///scratch/Shares/layer/singularity/deepvariant-0.9.0.simg'
    //container = 'file:///home/maja5467//workspace/singularity//nfcore-sarek-2.5.2.img'
  }
  withName:DV_MakeExamples {
    container = 'file:///scratch/Shares/layer/singularity/deepvariant_0.10.0.sif'
    //container = 'file:///home/maja5467//workspace/singularity//nfcore-sarek-2.5.2.img'
  }
  
  withName:DV_CallVariants {
    container = 'file:///scratch/Shares/layer/singularity/deepvariant_0.10.0.sif'
    //container = 'file:///home/maja5467//workspace/singularity//nfcore-sarek-2.5.2.img'
  }

  withName:DV_PostprocessVariants {
    container = 'file:///scratch/Shares/layer/singularity/deepvariant_0.10.0.sif'
    //container = 'file:///home/maja5467//workspace/singularity//nfcore-sarek-2.5.2.img'
  }

  withName:StrelkaSingle {
    container = 'file:///scratch/Shares/layer/singularity/nfcore-sarek-2.5.2.img'
    //container = 'file:///home/maja5467//workspace/singularity//nfcore-sarek-2.5.2.img'
  }
  
  withName:MantaSingle {
    container = 'file:///scratch/Shares/layer/singularity/nfcore-sarek-2.5.2.img'
    //container = 'file:///home/maja5467//workspace/singularity//nfcore-sarek-2.5.2.img'
  }
  
  withName:TIDDIT {
    container = 'file:///scratch/Shares/layer/singularity/nfcore-sarek-2.5.2.img'
    //container = 'file:///home/maja5467//workspace/singularity/nfcore-sarek-2.5.2.img'
  }

  withName:MultiQC {
    container = 'file:///scratch/Shares/layer/singularity/nfcore-sarek-2.5.2.img'
    //container = 'file:///home/maja5467//workspace/singularity/nfcore-sarek-2.5.2.img'
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  

  withName:ConcatVCF {
    //container = {(params.annotation_cache && params.snpEff_cache) ? 'nfcore/sarek:2.5.2' : "nfcore/sareksnpeff:2.5.2.${params.genome}"}
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'ignore'}
  }

  withName:SnpEff {
    //container = {(params.annotation_cache && params.snpEff_cache) ? 'nfcore/sarek:2.5.2' : "nfcore/sareksnpeff:2.5.2.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withLabel:VEP {
    //container = {(params.annotation_cache && params.vep_cache) ? 'nfcore/sarek:2.5.2' : "nfcore/sarekvep:2.5.2.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
}


process.shell = ['/bin/bash', '-euo', 'pipefail']

log{
  file = "logs/log"
}
report {  // Turning on execution report by default
  enabled = true
  file = "${NF_DIR}/report.html"
}

timeline { // Turning on timeline tracking by default
  enabled = true
  file = "${NF_DIR}/timeline.html"
}

dag { // Turning on dag by default
  enabled = true
  file = "${NF_DIR}/DAG.svg"
}

trace { // Turning on trace tracking by default
  enabled = true
  fields = 'process,task_id,hash,name,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
  file = "${NF_DIR}/trace.html"
}
